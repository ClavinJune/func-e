// Copyright 2019 Tetrate
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/manifest.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Compliance int32

const (
	Compliance_FIPS_1402 Compliance = 0
)

var Compliance_name = map[int32]string{
	0: "FIPS_1402",
}

var Compliance_value = map[string]int32{
	"FIPS_1402": 0,
}

func (x Compliance) String() string {
	return proto.EnumName(Compliance_name, int32(x))
}

func (Compliance) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{0}
}

type OperatingSystemName int32

const (
	OperatingSystemName_UBUNTU OperatingSystemName = 0
	OperatingSystemName_DEBIAN OperatingSystemName = 1
	OperatingSystemName_CENTOS OperatingSystemName = 2
	OperatingSystemName_RHEL   OperatingSystemName = 3
	OperatingSystemName_MACOS  OperatingSystemName = 4
)

var OperatingSystemName_name = map[int32]string{
	0: "UBUNTU",
	1: "DEBIAN",
	2: "CENTOS",
	3: "RHEL",
	4: "MACOS",
}

var OperatingSystemName_value = map[string]int32{
	"UBUNTU": 0,
	"DEBIAN": 1,
	"CENTOS": 2,
	"RHEL":   3,
	"MACOS":  4,
}

func (x OperatingSystemName) String() string {
	return proto.EnumName(OperatingSystemName_name, int32(x))
}

func (OperatingSystemName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{1}
}

// Builds must be uniquely addressable from the top level so that they can be used to look up the location of binaries.
// Format: filter_profile(-compliance_profile):envoy_version/operating_system-operating_system_version
// Examples:
//   - istio-fips1402:1.10.1/ubuntu-16.04
//   - standard:nightly/debian-8
type Manifest struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Key is composite key of the value's filter_profile and compliance_profile
	// Note: compliance_profile is optional
	// Format: filter_profile(-compliance_profile)
	Flavors              map[string]*Flavor `protobuf:"bytes,2,rep,name=flavors,proto3" json:"flavors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Manifest) Reset()         { *m = Manifest{} }
func (m *Manifest) String() string { return proto.CompactTextString(m) }
func (*Manifest) ProtoMessage()    {}
func (*Manifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{0}
}

func (m *Manifest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Manifest.Unmarshal(m, b)
}
func (m *Manifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Manifest.Marshal(b, m, deterministic)
}
func (m *Manifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manifest.Merge(m, src)
}
func (m *Manifest) XXX_Size() int {
	return xxx_messageInfo_Manifest.Size(m)
}
func (m *Manifest) XXX_DiscardUnknown() {
	xxx_messageInfo_Manifest.DiscardUnknown(m)
}

var xxx_messageInfo_Manifest proto.InternalMessageInfo

func (m *Manifest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Manifest) GetFlavors() map[string]*Flavor {
	if m != nil {
		return m.Flavors
	}
	return nil
}

type Flavor struct {
	// This is duplicated in order to make flavor easier to sort
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Filter profile is the name of the collection of filters
	// E.g. standard, minimal, istio
	FilterProfile string `protobuf:"bytes,2,opt,name=filter_profile,json=filterProfile,proto3" json:"filter_profile,omitempty"`
	// All filters available in this flavor
	Filters     []string     `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	Compliances []Compliance `protobuf:"varint,4,rep,packed,name=compliances,proto3,enum=api.Compliance" json:"compliances,omitempty"`
	// Key is Envoy version
	Versions             map[string]*Version `protobuf:"bytes,5,rep,name=versions,proto3" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Flavor) Reset()         { *m = Flavor{} }
func (m *Flavor) String() string { return proto.CompactTextString(m) }
func (*Flavor) ProtoMessage()    {}
func (*Flavor) Descriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{1}
}

func (m *Flavor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flavor.Unmarshal(m, b)
}
func (m *Flavor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flavor.Marshal(b, m, deterministic)
}
func (m *Flavor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flavor.Merge(m, src)
}
func (m *Flavor) XXX_Size() int {
	return xxx_messageInfo_Flavor.Size(m)
}
func (m *Flavor) XXX_DiscardUnknown() {
	xxx_messageInfo_Flavor.DiscardUnknown(m)
}

var xxx_messageInfo_Flavor proto.InternalMessageInfo

func (m *Flavor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Flavor) GetFilterProfile() string {
	if m != nil {
		return m.FilterProfile
	}
	return ""
}

func (m *Flavor) GetFilters() []string {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Flavor) GetCompliances() []Compliance {
	if m != nil {
		return m.Compliances
	}
	return nil
}

func (m *Flavor) GetVersions() map[string]*Version {
	if m != nil {
		return m.Versions
	}
	return nil
}

type Version struct {
	// This duplicated in order to make version easier to sort
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Key is operating system
	// Note: Keys in proto maps cannot be enums, so this has to be a string.
	OperatingSystems     map[string]*OperatingSystem `protobuf:"bytes,2,rep,name=operating_systems,json=operatingSystems,proto3" json:"operating_systems,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{2}
}

func (m *Version) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Version.Unmarshal(m, b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Version.Marshal(b, m, deterministic)
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return xxx_messageInfo_Version.Size(m)
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Version) GetOperatingSystems() map[string]*OperatingSystem {
	if m != nil {
		return m.OperatingSystems
	}
	return nil
}

type OperatingSystem struct {
	// Matches the key, duplicated here to be explicit.
	Name                 OperatingSystemName `protobuf:"varint,1,opt,name=name,proto3,enum=api.OperatingSystemName" json:"name,omitempty"`
	Builds               []*Build            `protobuf:"bytes,2,rep,name=builds,proto3" json:"builds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *OperatingSystem) Reset()         { *m = OperatingSystem{} }
func (m *OperatingSystem) String() string { return proto.CompactTextString(m) }
func (*OperatingSystem) ProtoMessage()    {}
func (*OperatingSystem) Descriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{3}
}

func (m *OperatingSystem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperatingSystem.Unmarshal(m, b)
}
func (m *OperatingSystem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperatingSystem.Marshal(b, m, deterministic)
}
func (m *OperatingSystem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatingSystem.Merge(m, src)
}
func (m *OperatingSystem) XXX_Size() int {
	return xxx_messageInfo_OperatingSystem.Size(m)
}
func (m *OperatingSystem) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatingSystem.DiscardUnknown(m)
}

var xxx_messageInfo_OperatingSystem proto.InternalMessageInfo

func (m *OperatingSystem) GetName() OperatingSystemName {
	if m != nil {
		return m.Name
	}
	return OperatingSystemName_UBUNTU
}

func (m *OperatingSystem) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

type Build struct {
	OperatingSystemVersion string   `protobuf:"bytes,1,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	DownloadLocationUrl    string   `protobuf:"bytes,2,opt,name=download_location_url,json=downloadLocationUrl,proto3" json:"download_location_url,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *Build) Reset()         { *m = Build{} }
func (m *Build) String() string { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()    {}
func (*Build) Descriptor() ([]byte, []int) {
	return fileDescriptor_346685e380de5b1f, []int{4}
}

func (m *Build) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Build.Unmarshal(m, b)
}
func (m *Build) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Build.Marshal(b, m, deterministic)
}
func (m *Build) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Build.Merge(m, src)
}
func (m *Build) XXX_Size() int {
	return xxx_messageInfo_Build.Size(m)
}
func (m *Build) XXX_DiscardUnknown() {
	xxx_messageInfo_Build.DiscardUnknown(m)
}

var xxx_messageInfo_Build proto.InternalMessageInfo

func (m *Build) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *Build) GetDownloadLocationUrl() string {
	if m != nil {
		return m.DownloadLocationUrl
	}
	return ""
}

func init() {
	proto.RegisterEnum("api.Compliance", Compliance_name, Compliance_value)
	proto.RegisterEnum("api.OperatingSystemName", OperatingSystemName_name, OperatingSystemName_value)
	proto.RegisterType((*Manifest)(nil), "api.Manifest")
	proto.RegisterMapType((map[string]*Flavor)(nil), "api.Manifest.FlavorsEntry")
	proto.RegisterType((*Flavor)(nil), "api.Flavor")
	proto.RegisterMapType((map[string]*Version)(nil), "api.Flavor.VersionsEntry")
	proto.RegisterType((*Version)(nil), "api.Version")
	proto.RegisterMapType((map[string]*OperatingSystem)(nil), "api.Version.OperatingSystemsEntry")
	proto.RegisterType((*OperatingSystem)(nil), "api.OperatingSystem")
	proto.RegisterType((*Build)(nil), "api.Build")
}

func init() { proto.RegisterFile("api/manifest.proto", fileDescriptor_346685e380de5b1f) }

var fileDescriptor_346685e380de5b1f = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xd1, 0x6e, 0xda, 0x30,
	0x14, 0x6d, 0x12, 0xa0, 0x70, 0x29, 0x34, 0x73, 0xd7, 0x29, 0x63, 0x2f, 0x59, 0xa4, 0x49, 0x08,
	0x4d, 0xd9, 0x9a, 0x75, 0x52, 0xb5, 0xb7, 0xc2, 0xe8, 0x86, 0xd4, 0x86, 0x2a, 0x94, 0x49, 0x7b,
	0x8a, 0x5c, 0x30, 0x93, 0x35, 0x27, 0x8e, 0x92, 0xc0, 0xc4, 0x6f, 0xec, 0x17, 0xf6, 0x35, 0xfb,
	0xab, 0x29, 0xb1, 0xd3, 0x85, 0x28, 0x6f, 0xd7, 0xe7, 0x9c, 0x7b, 0xf0, 0x39, 0x38, 0x80, 0x70,
	0x44, 0xdf, 0x05, 0x38, 0xa4, 0x1b, 0x92, 0xa4, 0x76, 0x14, 0xf3, 0x94, 0x23, 0x0d, 0x47, 0xd4,
	0xfa, 0xa3, 0x40, 0xfb, 0x4e, 0xe2, 0xc8, 0x80, 0xe3, 0x1d, 0x89, 0x13, 0xca, 0x43, 0x43, 0x31,
	0x95, 0x61, 0xc7, 0x2b, 0x8e, 0xe8, 0x12, 0x8e, 0x37, 0x0c, 0xef, 0x78, 0x9c, 0x18, 0xaa, 0xa9,
	0x0d, 0xbb, 0xce, 0xc0, 0xc6, 0x11, 0xb5, 0x8b, 0x4d, 0xfb, 0x46, 0x90, 0xd3, 0x30, 0x8d, 0xf7,
	0x5e, 0x21, 0x1d, 0x7c, 0x81, 0x93, 0x32, 0x81, 0x74, 0xd0, 0x7e, 0x92, 0xbd, 0xf4, 0xce, 0x46,
	0xf4, 0x1a, 0x9a, 0x3b, 0xcc, 0xb6, 0xc4, 0x50, 0x4d, 0x65, 0xd8, 0x75, 0xba, 0xb9, 0xab, 0xd8,
	0xf1, 0x04, 0xf3, 0x49, 0xbd, 0x52, 0xac, 0xdf, 0x2a, 0xb4, 0x04, 0x8a, 0x10, 0x34, 0x42, 0x1c,
	0x10, 0x69, 0x92, 0xcf, 0xe8, 0x0d, 0xf4, 0x37, 0x94, 0xa5, 0x24, 0xf6, 0xa3, 0x98, 0x6f, 0x28,
	0x13, 0x76, 0x1d, 0xaf, 0x27, 0xd0, 0x7b, 0x01, 0x66, 0xf1, 0x04, 0x90, 0x18, 0x9a, 0xa9, 0x65,
	0xf1, 0xe4, 0x11, 0x5d, 0x40, 0x77, 0xc5, 0x83, 0x88, 0x51, 0x1c, 0xae, 0x48, 0x62, 0x34, 0x4c,
	0x6d, 0xd8, 0x77, 0x4e, 0xf3, 0xcb, 0x4c, 0x9e, 0x70, 0xaf, 0xac, 0x41, 0x1f, 0xa1, 0x2d, 0xcb,
	0x49, 0x8c, 0x66, 0x5e, 0xc9, 0xcb, 0xd2, 0xe5, 0xed, 0x6f, 0x92, 0x13, 0x8d, 0x3c, 0x49, 0x07,
	0x33, 0xe8, 0x1d, 0x50, 0x35, 0x9d, 0x58, 0x87, 0x9d, 0x9c, 0xe4, 0xb6, 0x72, 0xa9, 0x5c, 0xca,
	0x5f, 0x05, 0x8e, 0x25, 0x5c, 0xdb, 0xca, 0x1c, 0x9e, 0xf1, 0x88, 0xc4, 0x38, 0xa5, 0xe1, 0x0f,
	0x3f, 0xd9, 0x27, 0x29, 0x09, 0x8a, 0x7f, 0xcf, 0x2a, 0x7b, 0xda, 0xf3, 0x42, 0xb5, 0x10, 0x22,
	0x71, 0x67, 0x9d, 0x57, 0xe0, 0xc1, 0x77, 0x38, 0xaf, 0x95, 0xd6, 0x64, 0x18, 0x1d, 0x66, 0x78,
	0x9e, 0xff, 0x5e, 0x65, 0xb9, 0x9c, 0x65, 0x05, 0xa7, 0x15, 0x16, 0xbd, 0x2d, 0x45, 0xea, 0x3b,
	0x46, 0x9d, 0x83, 0x8b, 0x03, 0x22, 0xc3, 0x5a, 0xd0, 0x7a, 0xdc, 0x52, 0xb6, 0x2e, 0x12, 0x42,
	0xae, 0x1f, 0x67, 0x90, 0x27, 0x19, 0x6b, 0x0b, 0xcd, 0x1c, 0x40, 0x57, 0x60, 0x54, 0x9b, 0xf1,
	0x0f, 0x1f, 0xfe, 0x8b, 0x4a, 0xf8, 0xa2, 0x67, 0x07, 0xce, 0xd7, 0xfc, 0x57, 0xc8, 0x38, 0x5e,
	0xfb, 0x8c, 0xaf, 0x70, 0x4a, 0x79, 0xe8, 0x6f, 0x63, 0x26, 0x1f, 0xdc, 0x59, 0x41, 0xde, 0x4a,
	0x6e, 0x19, 0xb3, 0xd1, 0x2b, 0x80, 0xff, 0x8f, 0x08, 0xf5, 0xa0, 0x73, 0x33, 0xbb, 0x5f, 0xf8,
	0x17, 0x97, 0xef, 0x1d, 0xfd, 0x68, 0xe4, 0xc2, 0x59, 0x4d, 0x28, 0x04, 0xd0, 0x5a, 0x8e, 0x97,
	0xee, 0xc3, 0x52, 0x3f, 0xca, 0xe6, 0xcf, 0xd3, 0xf1, 0xec, 0xda, 0xd5, 0x95, 0x6c, 0x9e, 0x4c,
	0xdd, 0x87, 0xf9, 0x42, 0x57, 0x51, 0x1b, 0x1a, 0xde, 0xd7, 0xe9, 0xad, 0xae, 0xa1, 0x0e, 0x34,
	0xef, 0xae, 0x27, 0xf3, 0x85, 0xde, 0x78, 0x6c, 0xe5, 0xdf, 0xf6, 0x87, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x6b, 0x83, 0x3a, 0x9d, 0xf1, 0x03, 0x00, 0x00,
}
